/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *    http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.wirez.basicset.client.shape.factory;

import org.wirez.basicset.api.Circle;
import org.wirez.basicset.api.Polygon;
import org.wirez.basicset.api.Rectangle;
import org.wirez.client.shapes.factory.BasicShapesFactory;
import org.wirez.core.api.definition.util.DefinitionUtils;
import org.wirez.core.client.shape.Shape;
import org.wirez.core.client.shape.factory.CompositeShapeFactory;
import org.wirez.core.definition.shape.proxy.ShapeProxy;
import org.wirez.core.client.shape.view.ShapeView;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;

// TODO: Should be generated by annot processors.

@ApplicationScoped
public class BasicSetShapeFactory extends CompositeShapeFactory<Object, Shape<?>> {

    @SuppressWarnings("unchecked")
    private static final Map<Class<?>, ShapeProxy<Object, ShapeView>> PROXIES
            = new HashMap() {{

        put( Circle.class, new org.wirez.basicset.shape.proxy.CircleProxy() );
        put( Rectangle.class, new org.wirez.basicset.shape.proxy.RectangleProxy() );
        put( Polygon.class, new org.wirez.basicset.shape.proxy.PolygonProxy() );

    }};

    BasicShapesFactory basicShapesFactory;

    @Inject
    public BasicSetShapeFactory( final DefinitionUtils definitionUtils,
                                 final BasicShapesFactory basicShapesFactory ) {
        super( definitionUtils );
        this.basicShapesFactory = basicShapesFactory;
    }

    @PostConstruct
    @SuppressWarnings("unchecked")
    public void init() {

        basicShapesFactory.addProxies( PROXIES );

        super.addFactory( basicShapesFactory );

    }

}
