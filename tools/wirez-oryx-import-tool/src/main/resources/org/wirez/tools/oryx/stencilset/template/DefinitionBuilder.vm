/*
* Copyright 2016 Red Hat, Inc. and/or its affiliates.
*  
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*  
*    http://www.apache.org/licenses/LICENSE-2.0
*  
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package $thePackage;

#foreach ($p in $stencils)
import $p.pkg.$p.className;
#end

import org.wirez.core.api.factory.DefinitionBuilder;
import org.wirez.bpmn.api.BPMNDefinition;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.LinkedHashSet;
import java.util.Set;

@ApplicationScoped
public class $className implements DefinitionBuilder<BPMNDefinition> {

    $propertyBuilderClassName bpmnPropertyBuilder;
    $propertySetBuilderClassName bpmnPropertySetBuilder;

    protected $className () {
    }

    @Inject
    public $className ($propertyBuilderClassName bpmnPropertyBuilder, $propertySetBuilderClassName bpmnPropertySetBuilder) {
        this.bpmnPropertyBuilder = bpmnPropertyBuilder;
        this.bpmnPropertySetBuilder = bpmnPropertySetBuilder;
    }

    private static final Set<String>  SUPPORTED_DEF_IDS = new LinkedHashSet<String>( $stencils.size() ) {{
        #foreach ($p in $stencils)
            add($p.className .ID);
        #end
    }};
        
    @Override
    public boolean accepts(final String id) {
        return SUPPORTED_DEF_IDS.contains(id);
    }

    @Override
    public BPMNDefinition build(final String id) {

        #foreach ($p in $stencils)
            if ($p.className .ID.equals(id)) {
            return build$p.id ();
            }
        #end

        throw new RuntimeException("Instance expected to be build here.");
    }


    #foreach ($p in $stencils)

        public $p.className build$p.id () {
            $p.className o = new $p.id (
        
            #set( $counter = 0 )
            #foreach ($p1 in $propertyPacksByStencil.get( $p.id ) )
                bpmnPropertySetBuilder.build$p1.id ()
                #if ( ( $propertiesByStencil.get( $p.id ).size() > 0 ) || ( $counter < ( $propertyPacksByStencil.get( $p.id ).size() - 1 ) ) )
                    ,
                #end
                #set( $counter = $counter + 1 )
            #end

            #set( $counter = 0 )
            #foreach ($p2 in $propertiesByStencil.get( $p.id ) )
                bpmnPropertyBuilder.build$p2.id ()
                #if ( $counter < ( $propertiesByStencil.get( $p.id ).size() - 1 ) )
                    ,
                #end
                #set( $counter = $counter + 1 )
            #end
        
            );

            $initsByStencil.get( $p.id )
        
            return o;
        }

    #end

}
